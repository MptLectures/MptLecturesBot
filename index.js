const { helloKb } = require('./keyboards.js')
const { OpenAI } = require('openai') 
require('dotenv').config()
const { generateUpdateMiddleware } = require("telegraf-middleware-console-time") 
const { Bot, InlineKeyboard, session } = require('grammy')
const { conversations, createConversation } = require("@grammyjs/conversations");

const bot = new Bot(process.env.MPTLECTUTES)

const openai = new OpenAI({
    apiKey: process.env.OPENAI,
})

async function GenerateTargetOrTotal(conversation, ctx) {
    await ctx.reply("Type your technical task:");
    const { message } = await conversation.wait();
    await ctx.reply(`Creating new total, ${message.text}!`);
    const answer = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'system', content: message }],
    });
    await ctx.reply(answer.choices[0]);
}

bot.use(session({
    initial() {
      return {};
    },
}));
  
bot.use(conversations());
bot.use(createConversation(GenerateTargetOrTotal));
bot.use(generateUpdateMiddleware())

bot.api.setMyCommands([
    {
        command: "start", description: "–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
    },
    {
        command: "queue_start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å",
    },
    {
        command: "create_target_and_total", description: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å –∏ –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã"
    }
])

bot.command("create_target_and_total", async (ctx) => {
    await ctx.conversation.enter("GenerateTargetOrTotal");
});

bot.command('start', async (ctx) => {
    await ctx.reply("–ü—Ä–∏–≤–µ—Ç!‚ù§Ô∏è\n–≠—Ç–æ –±–æ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã –ª–µ–∫—Ü–∏–∏ 2 –∫—É—Ä—Å–∞üìö, –∞ —Ç–∞–∫ –æ–Ω —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏, –Ω–∞ —Å–¥–∞—á—É –∫–∞–∫–∏—Ö –ª–∏–±–æ —Ä–∞–±–æ—Ç!)", { reply_markup: helloKb })
})

bot.command("queue_start", async (ctx) => {
    const queueKeyboard = new InlineKeyboard()
    .text("–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å: \n", "q#join")
    await ctx.reply('–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –æ—á–µ—Ä–µ–¥—å: ', {
        reply_markup: queueKeyboard,
    })
})

bot.callbackQuery('q#join', async (ctx) => {
    await ctx.answerCallbackQuery({
        text: "–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å",
    })

    const queueKeyboard = new InlineKeyboard()
    .text("–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å: \n", "q#join")

    const newText = `${ctx.callbackQuery.message.text}\n${ctx.callbackQuery.message.text.split('\n').length}. @${ctx.callbackQuery.message.chat.username}`

    await ctx.editMessageText(newText, {
        reply_markup: queueKeyboard,
    })

    console.log(ctx.callbackQuery)
})

bot.start()
